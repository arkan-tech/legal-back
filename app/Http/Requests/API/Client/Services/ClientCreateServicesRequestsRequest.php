<?php

namespace App\Http\Requests\API\Client\Services;

use App\Http\Requests\API\BaseRequest;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ClientCreateServicesRequestsRequest extends BaseRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */


    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, mixed>
     */
    public function rules()
    {
        return [
            'service_id' => 'required|numeric|exists:services,id',
            'importance_id' => 'required|numeric|exists:client_reservations_importance,id',
            'description' => 'required',
            'files' => 'sometimes|array',
            'files.*' => 'mimes:png,jpg,jpeg,pdf',
            'lawyer_ids' => 'required|array|min:1',
            'lawyer_ids.*' => 'exists:accounts,id'
        ];
    }

    public function messages()
    {
        return [
            'description.required' => 'حقل المحتوى مطلوب ',
            'service_id.required' => 'حقل الخدمة مطلوب ',
            'service_id.numeric' => 'حقل الخدمة يجب ان يكون ارقام ',
            'service_id.exists' => 'حقل الخدمة غير موجود ',
            'importance_id.required' => 'حقل الاهمية مطلوب ',
            'importance_id.numeric' => 'حقل الاهمية يجب ان يكون ارقام ',
            'importance_id.exists' => 'حقل الاهمية غير موجود ',
            'files.array' => 'حقل الملفات يجب أن يكون مصفوفة.',
            'files.*.mimes' => 'كل ملف يجب أن يكون بصيغة png,jpg,jpeg,pdf.',
            'lawyer_ids.required' => 'حقل معرفات المحامين مطلوب.',
            'lawyer_ids.array' => 'حقل معرفات المحامين يجب أن يكون مصفوفة.',
            'lawyer_ids.min' => 'يجب اختيار محامٍ واحد على الأقل.',
            'lawyer_ids.*.exists' => 'المحامي المحدد غير موجود.',
        ]; // TODO: Change the autogenerated stub
    }
}
