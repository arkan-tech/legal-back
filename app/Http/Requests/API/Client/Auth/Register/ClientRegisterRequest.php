<?php

namespace App\Http\Requests\API\Client\Auth\Register;

use App\Models\Lawyer\Lawyer;
use Illuminate\Validation\Rule;
use App\Rules\ValidReferralCode;
use App\Models\Service\ServiceUser;
use App\Http\Requests\API\BaseRequest;
use Illuminate\Foundation\Http\FormRequest;

class ClientRegisterRequest extends BaseRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */


    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, mixed>
     */
    public function rules()
    {
        $phone_code = request()->get('phone_code');
        return [
            'name' => 'required',
            'email' => [
                'required',
                'email',
                function ($attribute, $value, $fail) {
                    $lawyerExists = Lawyer::where('email', $value)->whereNull('deleted_at')->exists();
                    $clientExists = ServiceUser::where('email', $value)->whereNull('deleted_at')->exists();

                    if ($lawyerExists || $clientExists) {
                        $fail('البريد الإلكتروني موجود مسبقا');
                    }
                }
            ],
            'mobile' => [
                'required',
                'numeric',
                function ($attribute, $value, $fail) use ($phone_code) {
                    $lawyerExists = Lawyer::where('phone', $value)->where('phone_code', $phone_code)->whereNull('deleted_at')->exists();
                    $clientExists = ServiceUser::where('mobil', $value)->where('phone_code', $phone_code)->whereNull('deleted_at')->exists();

                    if ($lawyerExists || $clientExists) {
                        $fail('هذا الرقم موجود مسبقا');
                    }
                }
            ],
            'phone_code' => ['required', 'numeric'],

            'type' => 'required|numeric|in:1,2,3,4,5',
            'activation_type' => 'required|numeric|in:1,2',
            'password' => 'required',
            'country_id' => 'sometimes|numeric|exists:countries,id',
            'city_id' => 'sometimes|numeric|exists:cities,id',
            'nationality_id' => 'sometimes|numeric|exists:nationalities,id',
            'longitude' => 'required|numeric',
            'latitude' => 'required|numeric',
            'region_id' => 'sometimes|numeric|exists:regions,id',
            // 'referred_by' => ['sometimes', new ValidReferralCode()]
        ];
    }

    public function messages()
    {
        return [
            'name.required' => 'الاسم مطلوب',

            'email.required' => 'البريد الإلكتروني مطلوب',
            'email.email' => 'البريد الإلكتروني يجب ان يكون بالشكل الصحيح',
            'email.unique' => ' البريد الإلكتروني موجود مسبقاً',

            'mobile.required' => 'الموبايل مطلوب',
            'mobile.numeric' => 'الموبايل يجب ان يكون ارقام',
            'phone_code.required' => 'مقدمة الدولة  مطلوب',
            'phone_code.numeric' => 'مقدمة الدولة يجب ان يكون ارقام',
            'mobile.unique' => ' الموبايل موجود سابقاً',

            'type.required' => ' النوع مطلوب',
            'type.numeric' => ' النوع يجب ان يكون ارقام',
            'type.in' => ' النوع يجب ان يكون ضمن [ 1,2,3,4,5]',


            'activation_type.required' => '  نوع التحقق',
            'activation_type.numeric' => '  نوع التحقق يجب ان يكون ارقام',
            'activation_type.in' => '  نوع التحقق يجب ان يكون ضمن [ 1,2]',


            'password.required' => 'كلمة المرور مطلوب',

            'country_id.required' => 'الدولة مطلوب',
            'country_id.numeric' => 'الدولة غير صحيح',
            'country_id.exists' => 'الدولة غير موجود',

            'city_id.required' => 'المدينة مطلوب',
            'city_id.numeric' => 'المدينة غير صحيح',
            'city_id.exists' => 'المدينة غير موجود',

            'region_id.required' => 'المدينة مطلوب',
            'region_id.numeric' => 'المنطقة غير صحيح',
            'region_id.exists' => 'المنطقة غير موجود',

            'nationality_id.required' => 'الجنسية مطلوب',
            'nationality_id.numeric' => 'الجنسية غير صحيح',
            'nationality_id.exists' => 'الجنسية غير موجود',

            'longitude.required' => 'longitude مطلوب',
            'latitude.required' => 'latitude مطلوب',

            'longitude.numeric' => 'longitude يجب ان يكون ارقام',
            'latitude.numeric' => 'latitude يجب ان يكون ارقام',
            // 'referred_by.valid_referral_code' => 'رمز المشاركة غير صحيح'



        ]; // TODO: Change the autogenerated stub
    }
}