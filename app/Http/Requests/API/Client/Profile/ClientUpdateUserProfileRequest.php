<?php

namespace App\Http\Requests\API\Client\Profile;

use App\Models\Lawyer\Lawyer;
use Illuminate\Validation\Rule;
use App\Models\Service\ServiceUser;
use App\Http\Requests\API\BaseRequest;
use Illuminate\Foundation\Http\FormRequest;

class ClientUpdateUserProfileRequest extends BaseRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */


    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, mixed>
     */
    public function rules()
    {
        $client = auth()->guard('api_client')->user()->id;
        $phone_code = request()->get('phone_code');

        return [
            'name' => 'sometimes',
            'email' => [
                'sometimes',
                'email',
                function ($attribute, $value, $fail) use ($client) {
                    // Rule::unique('lawyers', 'email')->ignore($u_id)->whereNull('deleted_at')
                    $lawyerExists = Lawyer::where('email', $value)->whereNull('deleted_at')->exists();
                    $clientExists = ServiceUser::where('email', $value)->whereNull('deleted_at')->where('id', '!=', $client)->exists();

                    if ($lawyerExists || $clientExists) {
                        $fail('البريد الإلكتروني موجود مسبقا');
                    }
                }
            ],
            'mobile' => [
                'required',
                'numeric',
                function ($attribute, $value, $fail) use ($client, $phone_code) {
                    $lawyerExists = Lawyer::where('phone', $value)->where('phone_code', $phone_code)->whereNull('deleted_at')->exists();
                    $clientExists = ServiceUser::where('mobil', $value)->where('phone_code', $phone_code)->where('id', '!=', $client)->whereNull('deleted_at')->exists();

                    if ($lawyerExists || $clientExists) {
                        $fail('هذا الرقم موجود مسبقا');
                    }
                }
            ],
            'phone_code' => ['required', 'numeric'],

            'type' => 'sometimes|numeric|in:1,2,3,4,5',
            'password' => 'sometimes',
            'country_id' => 'sometimes|numeric|exists:countries,id',
            'city_id' => 'sometimes|numeric|exists:cities,id',
            'nationality_id' => 'sometimes|numeric|exists:nationalities,id',
            'activation_type' => 'required|numeric|in:1,2',

            'longitude' => 'required|numeric',
            'latitude' => 'required|numeric',
            'region_id' => 'sometimes|numeric|exists:regions,id',
        ];
    }

    public function messages()
    {
        return [
            'name.required' => 'حقل الاسم مطلوب',
            'email.required' => 'حقل الايميل مطلوب',
            'email.email' => 'حقل الايميل يجب ان يكون بالشكل الصحيح',
            'email.unique' => ' الايميل موجود مسبقاً',
            'mobile.required' => 'حقل الموبايل مطلوب',
            'mobile.numeric' => 'حقل الموبايل يجب ان يكون ارقام',
            'mobile.unique' => ' الموبايل موجود سابقاً',
            'type.required' => 'حقل  النوع مطلوب',
            'type.numeric' => 'حقل  النوع يجب ان يكون ارقام',
            'type.in' => 'حقل  النوع يجب ان يكون ضمن [ 1,2,3,4,5]',

            'country_id.numeric' => 'حقل الدولة غير صحيح',
            'country_id.exists' => 'حقل الدولة غير موجود',

            'city_id.numeric' => 'حقل المدينة غير صحيح',
            'city_id.exists' => 'حقل المدينة غير موجود',

            'nationality_id.numeric' => 'حقل الجنسية غير صحيح',
            'nationality_id.exists' => 'حقل الجنسية غير موجود',

        ]; // TODO: Change the autogenerated stub
    }
}
